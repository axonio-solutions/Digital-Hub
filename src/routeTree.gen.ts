/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminOrdersRouteImport } from './routes/admin/orders'
import { Route as AdminListingsRouteImport } from './routes/admin/listings'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as DigitalHubProductsIndexRouteImport } from './routes/digital-hub/products/index'
import { Route as DigitalHubProductsIdRouteImport } from './routes/digital-hub/products/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminOrdersRoute = AdminOrdersRouteImport.update({
  id: '/admin/orders',
  path: '/admin/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminListingsRoute = AdminListingsRouteImport.update({
  id: '/admin/listings',
  path: '/admin/listings',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DigitalHubProductsIndexRoute = DigitalHubProductsIndexRouteImport.update({
  id: '/digital-hub/products/',
  path: '/digital-hub/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const DigitalHubProductsIdRoute = DigitalHubProductsIdRouteImport.update({
  id: '/digital-hub/products/$id',
  path: '/digital-hub/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/auth/login': typeof AuthLoginRoute
  '/digital-hub/products/$id': typeof DigitalHubProductsIdRoute
  '/digital-hub/products': typeof DigitalHubProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/auth/login': typeof AuthLoginRoute
  '/digital-hub/products/$id': typeof DigitalHubProductsIdRoute
  '/digital-hub/products': typeof DigitalHubProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/auth/login': typeof AuthLoginRoute
  '/digital-hub/products/$id': typeof DigitalHubProductsIdRoute
  '/digital-hub/products/': typeof DigitalHubProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/admin/orders'
    | '/auth/login'
    | '/digital-hub/products/$id'
    | '/digital-hub/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/admin/orders'
    | '/auth/login'
    | '/digital-hub/products/$id'
    | '/digital-hub/products'
  id:
    | '__root__'
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/admin/orders'
    | '/auth/login'
    | '/digital-hub/products/$id'
    | '/digital-hub/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminListingsRoute: typeof AdminListingsRoute
  AdminOrdersRoute: typeof AdminOrdersRoute
  AuthLoginRoute: typeof AuthLoginRoute
  DigitalHubProductsIdRoute: typeof DigitalHubProductsIdRoute
  DigitalHubProductsIndexRoute: typeof DigitalHubProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/orders': {
      id: '/admin/orders'
      path: '/admin/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/listings': {
      id: '/admin/listings'
      path: '/admin/listings'
      fullPath: '/admin/listings'
      preLoaderRoute: typeof AdminListingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/digital-hub/products/': {
      id: '/digital-hub/products/'
      path: '/digital-hub/products'
      fullPath: '/digital-hub/products'
      preLoaderRoute: typeof DigitalHubProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/digital-hub/products/$id': {
      id: '/digital-hub/products/$id'
      path: '/digital-hub/products/$id'
      fullPath: '/digital-hub/products/$id'
      preLoaderRoute: typeof DigitalHubProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminListingsRoute: AdminListingsRoute,
  AdminOrdersRoute: AdminOrdersRoute,
  AuthLoginRoute: AuthLoginRoute,
  DigitalHubProductsIdRoute: DigitalHubProductsIdRoute,
  DigitalHubProductsIndexRoute: DigitalHubProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
