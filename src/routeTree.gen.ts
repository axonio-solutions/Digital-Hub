/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ClientIndexRouteImport } from './routes/client/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ClientDashboadRouteImport } from './routes/client/dashboad'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminListingsRouteImport } from './routes/admin/listings'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientIndexRoute = ClientIndexRouteImport.update({
  id: '/client/',
  path: '/client/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientDashboadRoute = ClientDashboadRouteImport.update({
  id: '/client/dashboad',
  path: '/client/dashboad',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminListingsRoute = AdminListingsRouteImport.update({
  id: '/admin/listings',
  path: '/admin/listings',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/client/dashboad': typeof ClientDashboadRoute
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/client': typeof ClientIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/client/dashboad': typeof ClientDashboadRoute
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/client': typeof ClientIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/listings': typeof AdminListingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/client/dashboad': typeof ClientDashboadRoute
  '/admin/': typeof AdminIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/client/': typeof ClientIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/auth/login'
    | '/auth/register'
    | '/client/dashboad'
    | '/admin'
    | '/auth'
    | '/client'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/auth/login'
    | '/auth/register'
    | '/client/dashboad'
    | '/admin'
    | '/auth'
    | '/client'
  id:
    | '__root__'
    | '/'
    | '/admin/dashboard'
    | '/admin/listings'
    | '/auth/login'
    | '/auth/register'
    | '/client/dashboad'
    | '/admin/'
    | '/auth/'
    | '/client/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminListingsRoute: typeof AdminListingsRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  ClientDashboadRoute: typeof ClientDashboadRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  ClientIndexRoute: typeof ClientIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/': {
      id: '/client/'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/dashboad': {
      id: '/client/dashboad'
      path: '/client/dashboad'
      fullPath: '/client/dashboad'
      preLoaderRoute: typeof ClientDashboadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/listings': {
      id: '/admin/listings'
      path: '/admin/listings'
      fullPath: '/admin/listings'
      preLoaderRoute: typeof AdminListingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminListingsRoute: AdminListingsRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  ClientDashboadRoute: ClientDashboadRoute,
  AdminIndexRoute: AdminIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  ClientIndexRoute: ClientIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
