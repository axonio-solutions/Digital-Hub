/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/_admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AdminDashboardRouteRouteImport } from './routes/_admin/dashboard/route'
import { Route as DigitalHubProductsIndexRouteImport } from './routes/_digital-hub/products/index'
import { Route as AdminDashboardIndexRouteImport } from './routes/_admin/dashboard/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as DigitalHubProductsIdRouteImport } from './routes/_digital-hub/products/$id'
import { Route as AdminDashboardOrdersRouteImport } from './routes/_admin/dashboard/orders'
import { Route as AdminDashboardListingsRouteImport } from './routes/_admin/dashboard/listings'

const AdminRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRouteRoute = AdminDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const DigitalHubProductsIndexRoute = DigitalHubProductsIndexRouteImport.update({
  id: '/_digital-hub/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminDashboardRouteRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DigitalHubProductsIdRoute = DigitalHubProductsIdRouteImport.update({
  id: '/_digital-hub/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardOrdersRoute = AdminDashboardOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminDashboardRouteRoute,
} as any)
const AdminDashboardListingsRoute = AdminDashboardListingsRouteImport.update({
  id: '/listings',
  path: '/listings',
  getParentRoute: () => AdminDashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AdminDashboardRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/dashboard/listings': typeof AdminDashboardListingsRoute
  '/dashboard/orders': typeof AdminDashboardOrdersRoute
  '/products/$id': typeof DigitalHubProductsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard/': typeof AdminDashboardIndexRoute
  '/products': typeof DigitalHubProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/dashboard/listings': typeof AdminDashboardListingsRoute
  '/dashboard/orders': typeof AdminDashboardOrdersRoute
  '/products/$id': typeof DigitalHubProductsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard': typeof AdminDashboardIndexRoute
  '/products': typeof DigitalHubProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_admin/dashboard': typeof AdminDashboardRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_admin/dashboard/listings': typeof AdminDashboardListingsRoute
  '/_admin/dashboard/orders': typeof AdminDashboardOrdersRoute
  '/_digital-hub/products/$id': typeof DigitalHubProductsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/_admin/dashboard/': typeof AdminDashboardIndexRoute
  '/_digital-hub/products/': typeof DigitalHubProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/listings'
    | '/dashboard/orders'
    | '/products/$id'
    | '/api/auth/$'
    | '/dashboard/'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard/listings'
    | '/dashboard/orders'
    | '/products/$id'
    | '/api/auth/$'
    | '/dashboard'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_admin/dashboard'
    | '/_auth/login'
    | '/_admin/dashboard/listings'
    | '/_admin/dashboard/orders'
    | '/_digital-hub/products/$id'
    | '/api/auth/$'
    | '/_admin/dashboard/'
    | '/_digital-hub/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  DigitalHubProductsIdRoute: typeof DigitalHubProductsIdRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  DigitalHubProductsIndexRoute: typeof DigitalHubProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/dashboard': {
      id: '/_admin/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_digital-hub/products/': {
      id: '/_digital-hub/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof DigitalHubProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/dashboard/': {
      id: '/_admin/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof AdminDashboardRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_digital-hub/products/$id': {
      id: '/_digital-hub/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof DigitalHubProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/dashboard/orders': {
      id: '/_admin/dashboard/orders'
      path: '/orders'
      fullPath: '/dashboard/orders'
      preLoaderRoute: typeof AdminDashboardOrdersRouteImport
      parentRoute: typeof AdminDashboardRouteRoute
    }
    '/_admin/dashboard/listings': {
      id: '/_admin/dashboard/listings'
      path: '/listings'
      fullPath: '/dashboard/listings'
      preLoaderRoute: typeof AdminDashboardListingsRouteImport
      parentRoute: typeof AdminDashboardRouteRoute
    }
  }
}

interface AdminDashboardRouteRouteChildren {
  AdminDashboardListingsRoute: typeof AdminDashboardListingsRoute
  AdminDashboardOrdersRoute: typeof AdminDashboardOrdersRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
}

const AdminDashboardRouteRouteChildren: AdminDashboardRouteRouteChildren = {
  AdminDashboardListingsRoute: AdminDashboardListingsRoute,
  AdminDashboardOrdersRoute: AdminDashboardOrdersRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
}

const AdminDashboardRouteRouteWithChildren =
  AdminDashboardRouteRoute._addFileChildren(AdminDashboardRouteRouteChildren)

interface AdminRouteChildren {
  AdminDashboardRouteRoute: typeof AdminDashboardRouteRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRouteRoute: AdminDashboardRouteRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  DigitalHubProductsIdRoute: DigitalHubProductsIdRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  DigitalHubProductsIndexRoute: DigitalHubProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
